Q1>Write a Java Program to implement Strategy Pattern for Duck Behavior. Create
instance variable that holds current state of Duck from there, we just need to handle all
Flying Behaviors and Quack Behavior.
=>
abstract class Duck { 
 FlyBehaviour flyBehaviour; 
 QuackBehaviour quackBehaviour; 
 
 public Duck() { 
 }
 
 public abstract void display(); 
 public void performFly() { 
 flyBehaviour.fly(); 
 }
 
 public void performQuack() { 
 quackBehaviour.quack(); 
 }
 
 public void swim() { 
 System.out.println("All ducks float even decoys"); 
 }
 
 public void setFlyBehaviour(FlyBehaviour fb) { 
 flyBehaviour = fb; 
 } 
 
 public void setQuackBehaviour(QuackBehaviour qb) { 
 QuackBehaviour q; 
 } 
} 

 class MallardDuck extends Duck { 
 
 public MallardDuck() { 
 quackBehaviour = new Quack(); 
 flyBehaviour = new FlyWithWings(); 
 }
 
 public void display() { 
 System.out.println("I'm a real Mallard duck"); 
 } 
}

 interface FlyBehaviour { 
 public void fly(); 
} 

interface QuackBehaviour { 
 public void quack() { 
 System.out.println("Quack"); 
 } 
}

 class Quack implements QuackBehaviour { 
 public void quack() { 
 System.out.println("Quack"); 
 } 
} 
 class FlyWithWings implements FlyBehaviour { 
 public void fly() { 
 System.out.println("I'm flying!!"); 
 } 
} 

public class Main { 
 public static void main(String[] args) { 
 Duck mallard = new MallardDuck(); 
 mallard.performQuack(); 
 mallard.performFly(); 
 } 
} 

/*Simple Programme*/ 
interface DuckB 
{ 
 public void oper(); 
} 
class Fly implements DuckB 
{ 
 public void oper() 
 { 
 System.out.println("Duck Flies"); 
 } 
} 
 class Quack implements DuckB 
{ 
 public void oper() 
 { 
 System.out.println("Duck Sounds Quack Quack"); 
 } 
} 
class Context 
{ 
 private DuckB s1; 
 public Context(DuckB p) 
 { import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error

data=pd.read_csv("house.csv")
print(data)

x=data[["bedrooms","sqft_living"]]
y=data.price

print(x)
print(y)


xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2)
print(xtrain)
print(xtest)
print(ytrain)
print(ytest)

lr=LinearRegression()
lr.fit(xtrain,ytrain)

print(lr.intercept_)
print(lr.coef_)

print(lr.predict([[2,1000]]))


ypred=lr.predict(xtest)
cm=mean_absolute_error(ytest,ypred)
print(cm)

Q3>Create a Node.js file that demonstrates create database and table in MySQL.
=>
var mysql=require("mysql");
var con=mysql.createConnection({
host:"localhost",user:"root",password:"password"});
con.connect(function(err)
{
if (err) throw err;
console.log("connected");
con.query("create database mydb",function(err)
{
if(err) throw err;
else{
console.log("created database");
con.query("use mydb",function(err){
})
}
})
})
con.query("create table student(rno int primary key,name text)",
function(err){
if(err)
console.log("create table failed");
else
{
con.query("insert into student
values(1,'sonal'),(2,'samarth'),(3,'prasad')",
function(err)
{
if(err)
console.log("insert values
failed!");
else{
console.log("insert values
successfully!");
con.query("select * from
student",function(err,result){
if(err) throw err;
console.log(result);
});
}
})
}
con.query("update student set
name='lasane' where rno=1",function(err){
if(err) throw err;
console.log("updated successfully");
});
});


 this.s1=p; 
 } 
 public void est() 
 { 
 s1.oper(); 
 } 
}

public class Main 
{ 
public static void main(String[] args) { 
Context c1=new Context(new Fly()); 
System.out.println("Duck Behaviour"); 
c1.est(); 
c1=new Context(new Quack()); 
System.out.println("Duck Behaviour "); 
c1.est(); 
 } 
} 

Q2>Write a python program to implement Multiple Linear Regression for given dataset
=>
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error

data=pd.read_csv("house.csv")
print(data)

x=data[["bedrooms","sqft_living"]]
y=data.price

print(x)
print(y)


xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2)
print(xtrain)
print(xtest)
print(ytrain)
print(ytest)

lr=LinearRegression()
lr.fit(xtrain,ytrain)

print(lr.intercept_)
print(lr.coef_)

print(lr.predict([[2,1000]]))


ypred=lr.predict(xtest)
cm=mean_absolute_error(ytest,ypred)
print(cm)

Q3>Create a Node.js file that demonstrates create database and table in MySQL.
=>
var mysql=require("mysql");
var con=mysql.createConnection({
host:"localhost",user:"root",password:"password"});
con.connect(function(err)
{
if (err) throw err;
console.log("connected");
con.query("create database mydb",function(err)
{
if(err) throw err;
else{
console.log("created database");
con.query("use mydb",function(err){
})
}
})
})
con.query("create table student(rno int primary key,name text)",
function(err){
if(err)
console.log("create table failed");
else
{
con.query("insert into student
values(1,'sonal'),(2,'samarth'),(3,'prasad')",
function(err)
{
if(err)
console.log("insert values
failed!");
else{
console.log("insert values
successfully!");
con.query("select * from
student",function(err,result){
if(err) throw err;
console.log(result);
});
}
})
}
con.query("update student set
name='lasane' where rno=1",function(err){
if(err) throw err;
console.log("updated successfully");
});
});

