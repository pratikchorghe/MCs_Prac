Q1>Write a java program to implement Adapter pattern to design Heart Model to Beat
Model?
=>
interface BeatModelInterface { 
void initialize(); 
void on(); 
void off(); 
void setBPM(int bpm); 
int getBPM(); 
void registerObserver(BeatObserver o); 
void removeObserver(BeatObserver o); 
void registerObserver(BPMObserver o); 
void removeObserver(BPMObserver o); 
} 
 class BeatModel implements BeatModelInterface, MetaEventListener { 
Sequencer sequencer; 
ArrayList beatObservers = new ArrayList(); 
ArrayList bpmObservers = new ArrayList(); 
int bpm = 90; 
// other instance variables here 
public void initialize() { 
setUpMidi(); 
buildTrackAndStart(); 
} 
public void on() { 
sequencer.start(); 
setBPM(90); 
} 
public void off() { 
setBPM(0); 
sequencer.stop(); 
} 
public void setBPM(int bpm) { 
this.bpm = bpm; 
sequencer.setTempoInBPM(getBPM()); 
notifyBPMObservers(); 
} 
public int getBPM() { 
return bpm; 
} 
void beatEvent() { 
notifyBeatObservers(); 
} 
// Code to register and notify observers 
// Lots of MIDI code to handle the beat 
} 
 class DJView implements ActionListener, BeatObserver, BPMObserver { 
BeatModelInterface model; 
ControllerInterface controller; 
JFrame viewFrame; 
JPanel viewPanel; 
BeatBar beatBar; 
JLabel bpmOutputLabel; 
public DJView(ControllerInterface controller, BeatModelInterface model) { 
this.controller = controller; 
this.model = model; 
model.registerObserver((BeatObserver)this); 
model.registerObserver((BPMObserver)this); 
} 
public void createView() { 
// Create all Swing components here 
} 
public void updateBPM() { 
int bpm = model.getBPM(); 
if (bpm == 0) { 
bpmOutputLabel.setText("offline"); 
} else { 
bpmOutputLabel.setText("Current BPM: " + model.getBPM()); 
} 
} 
public void updateBeat() { 
beatBar.setValue(100); 
} 
} 
 interface ControllerInterface { 
void start(); 
void stop(); 
void increaseBPM(); 
void decreaseBPM(); 
void setBPM(int bpm); 
} 

 class BeatController implements ControllerInterface { 
BeatModelInterface model; 
DJView view; 
public BeatController(BeatModelInterface model) { 
this.model = model; 
view = new DJView(this, model); 
view.createView(); 
view.createControls(); 
view.disableStopMenuItem(); 
view.enableStartMenuItem(); 
model.initialize(); 
} 
public void start() { 
model.on(); 
view.disableStartMenuItem(); 
view.enableStopMenuItem(); 
} 
public void stop() { 
model.off(); 
view.disableStopMenuItem(); 
view.enableStartMenuItem(); 
} 
public void increaseBPM() { 
int bpm = model.getBPM(); 
model.setBPM(bpm + 1); 
} 
public void decreaseBPM() { 
int bpm = model.getBPM(); 
model.setBPM(bpm - 1); 
} 
public void setBPM(int bpm) { 
model.setBPM(bpm); 
} 
} 

public class Main { 
public static void main (String[] args) { 
BeatModelInterface model = new BeatModel(); 
ControllerInterface controller = new BeatController(model); 
} 

Q2>Write a python program to find all null values in a given dataset and remove them?
=>
import pandas as pd
import numpy as np

data=pd.read_csv("ass2_data.csv")
print(data)

print(data.isnull())

print(data.notnull())

data1=data.dropna(axis=0,how="any")
print(data1)

data["m1"]=data["m1"].replace(np.NaN,data["m1"].mean())
data["m2"]=data["m2"].replace(np.NaN,data["m2"].mean())
data["m3"]=data["m3"].replace(np.NaN,data["m3"].mean())
print(data)

Q3>Create a node.js file that Select all records from the "customers" table, and delete the
specified record?
=>
var mysql = require('mysql');
var con = mysql.createConnection({
host: "localhost",
user: "root",
password: "sonal123",
database: "employee"
});
con.connect(function(err) {
if (err) throw err;
var sql = "DELETE FROM emp WHERE name = 'dada'";
con.query(sql, function (err, result) {
if (err) throw err;
console.log("Number of records deleted: " +
result.affectedRows);
});
});

